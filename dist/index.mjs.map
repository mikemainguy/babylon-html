{"version":3,"sources":["../src/htmlMeshBuilder.ts","../src/htmlButton.ts"],"sourcesContent":["import domtoimage from 'dom-to-image-more';\nimport {\n    AbstractMesh,\n    ActionManager,\n    MeshBuilder, Nullable,\n    Scene, SetValueAction,\n    StandardMaterial,\n    Texture\n} from \"@babylonjs/core\";\nexport type HtmlMeshOptions = {\n    html: string,\n    width?: number,\n    height?: number,\n    image?: {\n        width: number,\n        height: number\n    }\n    hoverHtml?: string,\n    clickHtml?: string\n}\nexport type HtmlImageData = {\n    base64Url: string,\n    width: number,\n    height: number\n}\n\nexport class HtmlMeshBuilder {\n    public static async CreatePlane(name: string, options: HtmlMeshOptions, scene: Scene): Promise<Nullable<AbstractMesh>> {\n\n        const mainElement = document.createElement('div');\n        const hoverElement = document.createElement('div');\n        const clickElement = document.createElement('div');\n\n        if (options.image) {\n            mainElement.style.width = options.image.width+'px';\n            mainElement.style.height = options.image.height+'px';\n            clickElement.style.width = options.image.width+'px';\n            clickElement.style.height = options.image.height+'px';\n            hoverElement.style.width = options.image.width+'px';\n            hoverElement.style.height = options.image.height+'px';\n        }\n        mainElement.innerHTML = options.html;\n        if (options.hoverHtml) {\n            hoverElement.innerHTML = options.hoverHtml;\n        } else {\n            hoverElement.innerHTML = options.html;\n        }\n        if (options.clickHtml) {\n            clickElement.innerHTML = options.clickHtml;\n        } else {\n            clickElement.innerHTML = options.html;\n        }\n\n        if (mainElement) {\n            const mainImage = await HtmlMeshBuilder.CreateImageData(mainElement);\n            if (mainImage == null) {\n                return null;\n            }\n            const hoverImage =\n                defaultImageIfNull(await HtmlMeshBuilder.CreateImageData(hoverElement), mainImage);\n\n            const clickImage =\n                defaultImageIfNull(await HtmlMeshBuilder.CreateImageData(clickElement), mainImage);\n\n            const plane = await HtmlMeshBuilder.BuildPlane(name, options, mainImage, scene);\n            const mainTexture = new Texture(mainImage.base64Url, scene);\n            const hoverTexture = new Texture(hoverImage.base64Url, scene);\n            const clickTexture = new Texture(clickImage.base64Url, scene);\n            (plane.material as StandardMaterial).opacityTexture =  mainTexture;\n            (plane.material as StandardMaterial).emissiveTexture = mainTexture;\n            plane.actionManager = new ActionManager(scene);\n            plane.actionManager.registerAction(new SetValueAction(ActionManager.OnPointerOverTrigger,\n                plane.material, 'emissiveTexture', hoverTexture\n            ));\n            plane.actionManager.registerAction(new SetValueAction(ActionManager.OnPointerOverTrigger,\n                plane.material, 'opacityTexture', hoverTexture\n            ));\n            plane.actionManager.registerAction(new SetValueAction(ActionManager.OnPointerOutTrigger,\n                plane.material, 'emissiveTexture', mainTexture\n            ));\n            plane.actionManager.registerAction(new SetValueAction(ActionManager.OnPointerOutTrigger,\n                plane.material, 'opacityTexture', mainTexture\n            ));\n            plane.actionManager.registerAction(new SetValueAction(ActionManager.OnPickDownTrigger,\n                plane.material, 'emissiveTexture', clickTexture\n            ));\n            plane.actionManager.registerAction(new SetValueAction(ActionManager.OnPickDownTrigger,\n                plane.material, 'opacityTexture', clickTexture\n            ));\n            plane.actionManager.registerAction(new SetValueAction(ActionManager.OnPickUpTrigger,\n                plane.material, 'emissiveTexture', hoverTexture\n            ));\n            plane.actionManager.registerAction(new SetValueAction(ActionManager.OnPickUpTrigger,\n                plane.material, 'opacityTexture', hoverTexture\n            ));\n\n\n            return plane;\n        } else {\n            console.error('Element not found');\n            return null;\n        }\n    }\n\n    public static async CreateTexture(base64: string, scene: Scene): Promise<Texture> {\n        return new Texture(base64, scene);\n    }\n    private static imageCache: Map<string, HtmlImageData> = new Map<string, HtmlImageData>();\n\n    public static async CreateImageData(node: HTMLElement): Promise<Nullable<HtmlImageData>> {\n        const bytes = new TextEncoder().encode(node.innerHTML);\n        const digest = await crypto.subtle.digest('SHA-256', bytes);\n        const resultBytes = [...new Uint8Array(digest)];\n        const hash = resultBytes.map(x => x.toString(16).padStart(2, '0')).join(\"\");\n\n        const data =HtmlMeshBuilder.imageCache.get(hash);\n        if (!data) {\n            document.body.appendChild(node);\n            const image64 = await domtoimage.toPng(node, {\n                bgcolor: 'transparent',\n                height: node.clientHeight,\n                width: node.clientWidth\n            });\n            document.body.removeChild(node);\n            HtmlMeshBuilder.imageCache.set(node.innerHTML, image64);\n\n\n            try {\n                const image = new Image();\n                image.decoding = 'sync';\n                image.loading = 'eager';\n                image.src = image64;\n                let retries = 1;\n                try {\n                    await image.decode();\n                } catch (err) {\n                    console.warn('Image decode failed, retrying')\n                    while (retries < 3) {\n                        try {\n                            console.warn('Retrying attempt ' + retries);\n                            await image.decode();\n                            break;\n                        } catch (err) {\n                            retries++;\n                            console.warn('Retry attempt ' + retries + ' failed');\n                        }\n                    }\n                }\n                if (retries > 1) {\n                    console.warn('Image decode succeeded after ' + retries + ' retries. You may be trying to create too many or too complex html nodes');\n                }\n                const width = image.width;\n                const height = image.height;\n                const output = {width: width, height: height, base64Url: image64};\n                HtmlMeshBuilder.imageCache.set(hash, output);\n                return output;\n            } catch (err) {\n                console.error(err);\n                console.error(node);\n                return null;\n            }\n        } else {\n            return data;\n        }\n    }\n    private static async BuildPlane(name: string, options: HtmlMeshOptions, image: HtmlImageData, scene: Scene) {\n        if (!options.width && !options.height) {\n            options.width = 1;\n            options.height = 1;\n        } else {\n            if (options.width) {\n                options.height = options.width*(image.height/image.width);\n            } else {\n                if (options.height) {\n                    options.width = options.height*(image.width/image.height);\n                }\n            }\n        }\n        const plane = MeshBuilder.CreatePlane(name, {width: options.width, height: options.height}, scene);\n        const mat = new StandardMaterial(name+'Material', scene);\n        plane.material = mat;\n        mat.disableLighting = true;\n        return plane;\n    }\n}\n\nfunction defaultImageIfNull(image: Nullable<HtmlImageData>, defaultImage: HtmlImageData): HtmlImageData {\n    if (image == null) {\n        return defaultImage;\n    } else {\n        return image;\n    }\n}","import {HtmlMeshBuilder, HtmlMeshOptions} from \"./htmlMeshBuilder\";\nimport {\n    AbstractMesh,\n    ActionEvent,\n    ActionManager,\n    ExecuteCodeAction, Nullable,\n    Observable,\n    Scene,\n    TransformNode\n} from \"@babylonjs/core\";\n\nexport type ButtonOptions ={\n    template?: string,\n    hoverStyle?: string,\n    mainStyle?: string,\n    clickStyle?: string,\n}\n\nexport class HtmlButton {\n    public static DEFAULT_STYLE = \"border-style: outset; border-radius: 32px; background: #000000; width: 100%; height: 100%; color: #ffffff; font-size: 64px\";\n    public static DEFAULT_HOVER_STYLE = \"border-style: outset; border-radius: 32px; background: #333366; width: 100%; height: 100%; color: #ffffee; font-size: 68px\";\n    public static DEFAULT_CLICK_STYLE = \"border-style: inset;border-radius: 32px; background: #666633; width: 100%; height: 100%; color: #000000; font-size: 60px\";\n    private _mesh: Nullable<AbstractMesh> = null;\n    public readonly transform: TransformNode\n    public readonly onReadyObservable = new Observable<HtmlButton>();\n    public readonly onPointerObservable: Observable<ActionEvent> = new Observable<ActionEvent>();\n    constructor(name: string, id: string, scene: Scene, buttonOptions?: ButtonOptions, meshOptions?: HtmlMeshOptions) {\n        this.transform = new TransformNode(id, scene);\n        this.setup(name, scene, buttonOptions, meshOptions).then((node) => {\n            if (node) {\n                node.parent = this.transform;\n            }\n            this.onReadyObservable.notifyObservers(this);\n        });\n    }\n    public get mesh(): Nullable<AbstractMesh> {\n        return this._mesh;\n    }\n    private async setup(name: string, scene: Scene, buttonOptions?: ButtonOptions, meshOptions?: HtmlMeshOptions): Promise<Nullable<AbstractMesh>> {\n        if (!buttonOptions) {\n            buttonOptions = {};\n            buttonOptions.mainStyle = HtmlButton.DEFAULT_STYLE;\n        }\n        if (!buttonOptions.hoverStyle) {\n            buttonOptions.hoverStyle = HtmlButton.DEFAULT_HOVER_STYLE;\n        }\n        if (!buttonOptions.clickStyle) {\n            buttonOptions.clickStyle = HtmlButton.DEFAULT_CLICK_STYLE;\n        }\n        const defaultOptions = {html:  `        \n            <button style='${buttonOptions.mainStyle}'>${name}</button>\n        `, hoverHtml: `\n         <button style='${buttonOptions.hoverStyle}'>${name}</button>\n        `, clickHtml: `\n         <button style='${buttonOptions.clickStyle}'>${name}</button>\n        `, height: .1, image: {width:256, height: 256}};\n        if (!meshOptions) {\n            meshOptions = defaultOptions;\n        } else {\n            if (!meshOptions.html) {\n                meshOptions.html = defaultOptions.html;\n            }\n            if (!meshOptions.hoverHtml) {\n                meshOptions.hoverHtml = defaultOptions.hoverHtml;\n            }\n            if (!meshOptions.clickHtml) {\n                meshOptions.clickHtml = defaultOptions.clickHtml;\n            }\n            if (!meshOptions.height) {\n                meshOptions.height = defaultOptions.height;\n            }\n            if (!meshOptions.image) {\n                meshOptions.image = defaultOptions.image;\n            }\n        }\n        const button = await HtmlMeshBuilder.CreatePlane(name+ '-mesh', meshOptions, scene);\n        if (button == null) {\n            return null;\n        }\n        this._mesh = button;\n        button.rotation.y = Math.PI;\n        button.id = this.transform.id;\n        if (button.actionManager != null) {\n            button.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnPointerOverTrigger, (evt) => {\n                this.onPointerObservable.notifyObservers(evt);\n            }));\n            button.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnPointerOutTrigger, (evt) => {\n                this.onPointerObservable.notifyObservers(evt);\n            }));\n            button.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnPickTrigger, (evt) => {\n                this.onPointerObservable.notifyObservers(evt);\n            }));\n        }\n        return button;\n    }\n    public dispose() {\n        if (this._mesh != null) {\n            this._mesh.dispose( false, true);\n            this._mesh = null;\n        }\n        this.onPointerObservable.clear();\n        this.onReadyObservable.clear();\n        this.transform.dispose( false, true);\n    }\n}"],"mappings":"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","names":["err","ActionManager","ActionManager"]}